<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: site-maint[建站相关] | My Octopress Blog]]></title>
  <link href="http://yoursite.com/blog/categories/site-maint-jian-zhan-xiang-guan/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2014-01-01T01:02:39+08:00</updated>
  <id>http://yoursite.com/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Wordpress转换到Octopress]]></title>
    <link href="http://yoursite.com/blog/2013/03/08/convert-wordpress-to-octopress/"/>
    <updated>2013-03-08T21:11:00+08:00</updated>
    <id>http://yoursite.com/blog/2013/03/08/convert-wordpress-to-octopress</id>
    <content type="html"><![CDATA[<p>今天青蛙下定决心干掉Wordpress了，不为别的，就因为
在大天朝访问Openshift不靠谱的连接状态。</p>

<p>把Wordpress转换到Octopress这件事，对于天天泡在github
上的青蛙来说，实在是简单到爆了。github账户有了，ruby
运行环境有了，只要简单几步就够了：</p>

<ol>
<li>按照 <a href="http://octopress.org/docs/setup/">http://octopress.org/docs/setup/</a>
git clone回octopress代码，安装bundler，安装默认主题。</li>
<li>按照 <a href="http://octopress.org/docs/deploying/github/">http://octopress.org/docs/deploying/github/</a>
在github上新建一个repo，名字取为"your_github_id.github.com"，在Octopress的目录中执行
<code>rake setup_github_pages</code>， 在提示符中填入这个新建的repo的git地址。</li>
<li><p>然后
    rake generate
    rake deploy</p></li>
<li><p>用浏览器访问"<a href="http://your_github_id.github.com">http://your_github_id.github.com</a>"，应该就能看到Octopress的页面了。</p></li>
<li><p>记得要把源码（包括blog的markdown文件）提交到git repo里： 包括blog的markdown文件
    git add .
    git commit -m &lsquo;your message&rsquo;
    git push origin source</p>

<p>之后每次写完新post都需要做这个操作，以便保留原始文档方便日后编辑。</p></li>
<li><p>编辑_config.yml文件，修改blog的title、author、email等等信息。
<a href="http://octopress.org/docs/configuring/">http://octopress.org/docs/configuring/</a></p></li>
<li>Octopress 配置好之后就是把Wordpress迁移过来了，青蛙找到了一个exitwp的工具：
<a href="https://github.com/thomasf/exitwp">https://github.com/thomasf/exitwp</a>
按照exitwp的README安装好之后，从wordpress导出xml格式的文章备份，首先用xmllint检查
一下这个xml文档是不是有语法错误，特别是特殊字符之类。因为exitwp用了python的xml module，
这个模块对某些错误极度敏感，所以要修正xmllint报出的所有错误才行。</li>
<li>把这个xml扔进exitwp里面的wordpress-xml目录，执行exitwp，所有的wp post就会被转换成
一个个markdown文件了。
把这些markdown复制到octopress目录里的source/_posts下面，然后运行
<code>rake generate &amp;&amp; rake deploy</code> 就可以把Wordpress的post内容都迁移到Octopress上了。</li>
<li>最后记得把这些markdown都扔进source branch里。</li>
</ol>


<p>目前青蛙还没解决的几个问题：</p>

<ol>
<li>Category的英文名字似乎没法编辑，青蛙还没找到相关的文档。</li>
<li>Draft和private状态的文档还不清楚怎么转换。</li>
<li>当post很多时（>1000），<code>rake generate</code>需要运行相当长的时间，青蛙每次执行这个命令都需要2分钟+。</li>
</ol>


<p><strong>Update 2013-03-16:</strong></p>

<p>Category的问题据说在Octopress2.1里面被解决了。</p>

<p>青蛙从2.1的branch上backport了一个patch到master，终于解决了中文category名字的问题。
patch在：
<a href="https://github.com/gfrog/gfrog.github.com/commit/60212ee17766e8ba84f81cfdc3f36ef992ae6fb1">https://github.com/gfrog/gfrog.github.com/commit/60212ee17766e8ba84f81cfdc3f36ef992ae6fb1</a>
没有经过完整测试，不过目前使用状况良好。</p>

<p>目前Category的写法为 <code>- Category link[Category Name]</code>，从而完美搞定中文分类名的问题。</p>

<p><strong>Update 2013-04-03:</strong></p>

<p>补充一些Octopress用法的问题：</p>

<ol>
<li>新建post： <code>rake new_post["Post标题"]</code>，
不过permalink似乎比较难修改，在markdown里写slug似乎无效，只能修改markdown文件名。</li>
<li>codeblock 的用法： <a href="http://octopress.org/docs/plugins/codeblock/">http://octopress.org/docs/plugins/codeblock/</a></li>
<li>修改header menu： 编辑 source/_includes/custom/navigation.html</li>
<li>添加Header image： 编辑 sass/custom/_styles.scss，加入：
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">header</span><span class="o">[</span><span class="nt">role</span><span class="o">=&amp;</span><span class="nt">ldquo</span><span class="o">;</span><span class="nt">banner</span><span class="o">&amp;</span><span class="nt">rdquo</span><span class="o">;]</span> <span class="p">{</span>
</span><span class='line'>     <span class="k">background-image</span><span class="o">:</span> <span class="sx">url(/images/header_bg.png)</span><span class="p">;</span>
</span><span class='line'>     <span class="k">background-repeat</span><span class="o">:</span> <span class="k">no-repeat</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[本blog已经迁移到 Openshift]]></title>
    <link href="http://yoursite.com/blog/2012/08/18/this-blog-has-transfered-to-openshift/"/>
    <updated>2012-08-18T19:02:31+08:00</updated>
    <id>http://yoursite.com/blog/2012/08/18/this-blog-has-transfered-to-openshift</id>
    <content type="html"><![CDATA[<p>本Blog今天已经正式迁移到Openshift平台上了，欢迎反馈问题报告及速度报告。</p>

<p>同时在linode的服务器已经关闭，其实linode真的很好很不错，只是青蛙的blog根本用不到一个vps来支持，vps上的资源几乎每天都是浪费掉的，还不如用PaaS平台低碳一些。</p>

<p><a href="https://picasaweb.google.com/108736461751011849061/OeEtEE#5777840821619509010"><img src="https://lh6.googleusercontent.com/-BxNOTrFKcBg/UC8DnW1hxxI/AAAAAAAAHuA/qy2wpNWaReM/s640/generate_graph.png" alt="generate_graph.png" /></a></p>

<p><a href="https://picasaweb.google.com/108736461751011849061/OeEtEE#5777840823666041122"><img src="https://lh6.googleusercontent.com/-gN1jz58MRK8/UC8DneddYSI/AAAAAAAAHuI/h0D9R4F0kj0/s640/generate_graph_mem.png" alt="generate_graph_mem.png" /></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[修复twitter digest插件的无法正确显示in-reply-to-id的bug]]></title>
    <link href="http://yoursite.com/blog/2011/01/08/in-reply-to-id-bug-of-twitter-digest-plugin/"/>
    <updated>2011-01-08T09:41:07+08:00</updated>
    <id>http://yoursite.com/blog/2011/01/08/in-reply-to-id-bug-of-twitter-digest-plugin</id>
    <content type="html"><![CDATA[<p>青蛙一直在用twitter digest插件来把tweets同步到wordpress上。今天检查同步过来的tweets的时候，青蛙发现所有回复其他人的推中，in reply to的链接都失效了，tweet id变成了科学计数法的形式。
这个问题是由于twitter digest没有正确处理这么大的tweet id造成的，青蛙在网上搜了一下处理php大整数的方法[1]，发现只需要把这个整数sprintf成一个string就好了。
具体的修改方法：</p>

<pre><code>--- twitter-digest-old.php  2011-01-07 17:35:01.000000000 +0000
+++ twitter-digest.php     2011-01-07 17:16:34.000000000 +0000
@@ -281,7 +281,7 @@
    $output .= ws_make_clickable(wp_specialchars($tweet-&gt;text));
    if (!empty($tweet-&gt;in_reply_to_screen_name)
        &amp;&amp; (!empty($tweet-&gt;in_reply_to_status_id))) {
-    $output .=         ' &lt;a href="'.ws_status_url($tweet-&gt;in_reply_to_screen_name, $tweet-&gt;in_reply_to_status_id).'"&gt;'.sprintf(__('in reply to %s', 'twitter-digest'), $tweet-&gt;in_reply_to_screen_name).'&lt;/a&gt;';
+    $output .=         ' &lt;a href="'.ws_status_url($tweet-&gt;in_reply_to_screen_name, sprintf('%1.0f', $tweet-&gt;in_reply_to_status_id)).'"&gt;'.sprintf(__('in reply to %s', 'twitter-digest'), $tweet-&gt;in_reply_to_screen_name).'&lt;/a&gt;';
    }
    // Show the date/time if the options are selected
</code></pre>

<p>参考资料：
[1] PHP 大数自动转换为科学计数法的无耻问题 <a href="http://mifunny.info/big-number-convert-to-scientific-notation-of-php-341.html">http://mifunny.info/big-number-convert-to-scientific-notation-of-php-341.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Dreamhost主机上安装bugzilla]]></title>
    <link href="http://yoursite.com/blog/2008/03/22/install-bugzilla-in-dreamhost/"/>
    <updated>2008-03-22T08:23:55+08:00</updated>
    <id>http://yoursite.com/blog/2008/03/22/install-bugzilla-in-dreamhost</id>
    <content type="html"><![CDATA[<p><a href="http://www.bugzilla.org/">bugzilla</a>是<a href="http://www.mozilla.org/">mozilla</a>一个很好的开源bug管理软件，青蛙准备在glinux的开发过程中用它来管理发现的bug。
但是dreamhost上没有bugzilla的自动安装功能，青蛙按照<a href="http://wiki.dreamhost.com/Bugzilla#Installing_Bugzilla">dreamhost的wiki上面介绍的方法</a>安装时，
又有很多perl模块没有，而且在dreamhost的主机上也没有权限安装这些perl模块。所以，青蛙决定先在主机上自己搞一个perl。</p>

<p>perl的安装方法很简单，<a href="http://wiki.dreamhost.com/Perl#Path_to_the_Perl_interpreter">dreamhost的wiki也有介绍</a>。
青蛙选择的是perl5.8.8，因为wiki上头说有一个针对dreamhost环境的补丁要打
（补丁文件在<a href="http://schwern.org/~schwern/src/dreamhost-5.8.8-cwd.patch">这里</a>下载）。
打上补丁以后，执行：</p>

<blockquote><p>sh Configure -Dusethreads -Duselargefiles -Dccflags=-DDEBIAN
-Dcccdlflags=-fPIC -Darchname=i386-linux -Dprefix=~/apps
-Dpager=/usr/bin/sensible-pager -Uafs -Ud_csh -Uusesfio
-Uusenm -Duseshrplib -Dvendorlib=/usr/share/perl5
-Dvendorarch=/usr/lib/perl5 -Dvendorprefix=/usr -Uinstallusrbinperl -des</p></blockquote>

<p>其中Dprefix参数要设置为要安装perl的目录。
config完毕就可以make &amp;&amp; make install了。</p>

<p>下面正式开始安装bugzilla，（青蛙的perl在~/apps/bin目录下，这个目录要换成你自己实际的目录哦），首先进入bugzilla的目录，执行：</p>

<blockquote><p>~/apps/bin/perl chechsetup.pl</p></blockquote>

<p>这个脚本会检查当前的perl环境，如果有缺少的模块，它会给出安装命令。
例如，在青蛙的主机上，Email::Send、Email::MIME::Modifier就被提示安装。
按照这个脚本给出的命令把必须的模块安装上，然后再次执行上面的命令，会在bugzilla目录下生成一个localconfig文件。</p>

<p>修改这个localconfig文件：</p>

<blockquote><p>$webservergroup = &ldquo;apache"中的apache改为自己真实的组名称，这个组名字可以用groups命令查到。
$db_host = "localhost&rdquo; 修改为真实的mysql服务器地址。
$db_name = &ldquo;bugs&rdquo; 修改为真实的数据库名。
$db_user = &ldquo;bugs&rdquo; 修改为真实的用户名。
$db_pass = &lsquo;&rsquo; 修改为真实的密码。</p></blockquote>

<p>上面几项都改完后，重新执行checksetup.pl脚本。这时脚本会询问管理员邮箱地址，设置管理员密码等等动作。</p>

<p>因为dreamhost使用suexec方式运行的cgi脚本，所以每次执行完checksetup.pl以后，都要执行以下命令：</p>

<blockquote><p>for i in docs graphs images js skins; do find $i -type d -exec chmod o+rx {} ; ; done
for i in jpg gif css js png html rdf xul; do find . -name *.$i -exec chmod o+r {} ; ; done
find . -name .htaccess -exec chmod o+r {} ;
chmod o+x . data data/webdot</p></blockquote>

<p>完成这些后，bugzilla就算是安装成功啦。可以先用浏览器访问下bugzilla的地址看看效果。</p>

<p>接下来说一下汉化的问题，汉化包可以在<a href="http://bugzilla-cn.googlecode.com/">这里</a>下载到，下载、解压以后，把cn文件夹复制到bugzilla目录里的template/目录就行啦。</p>
]]></content>
  </entry>
  
</feed>
